use data::expression::Value;
use data::expression::ast::{BinaryOp, Expr, ExprVar, UnaryOp};

pub expression -> Expr
    = binary_expression
    / simple_expression

binary_expression -> Expr = #infix<simple_expression> {
    #L x OP_ADD y { Expr::binary(BinaryOp::Add, x, y) }
       x OP_SUB y { Expr::binary(BinaryOp::Sub, x, y) }
    #L x OP_MUL y { Expr::binary(BinaryOp::Mul, x, y) }
       x OP_DIV y { Expr::binary(BinaryOp::Div, x, y) }
       x OP_MOD y { Expr::binary(BinaryOp::Mod, x, y) }
}

OP_ADD = "+" __
OP_SUB = "-" __
OP_MUL = "*" __
OP_DIV = "/" __
OP_MOD = "%" __

simple_expression -> Expr
    = OP_OPEN_PAREN e:expression OP_CLOSE_PAREN { e }
    / OP_SUB e:expression { Expr::unary(UnaryOp::Negate, e) }
    / literal
    / identifier

OP_OPEN_PAREN = "(" __
OP_CLOSE_PAREN = ")" __

literal -> Expr
    = f:float { Expr::Float(f) }
    / f:integer { Expr::Float(f) }

float -> Value
    = #quiet<_float> / #expected("number")

_float -> Value
    = f:$([0-9]+"."[0-9]*) __ { f.parse().unwrap() }
    / f:$("."[0-9]+) __ { f.parse().unwrap() }

integer -> Value
    = #quiet<_integer> / #expected("number")

_integer -> Value
    = f:$([0-9]+) __ { f.parse().unwrap() }

identifier -> Expr
    = #quiet<_identifier> / #expected("variable")

_identifier -> Expr
    = "$" v:varname { Expr::Var(v) }

varname -> ExprVar
    = n:$([a-zA-Z_]+) __ {
        if n == "rank" {
            ExprVar::Rank
        } else if n == "rand" {
            ExprVar::Rand
        } else {
            ExprVar::Named(n.to_string())
        }
    }

__ = whitespace*

whitespace = #quiet<[ \t]>
